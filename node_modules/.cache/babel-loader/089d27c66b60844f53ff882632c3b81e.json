{"ast":null,"code":"var _jsxFileName = \"E:\\\\Game Development\\\\Loggerhead 2.0\\\\loggerhead\\\\src\\\\App.js\";\nimport React from 'react';\nimport ThemeContext from './ThemeContext';\nimport Toolbar from './Toolbar';\nimport Log from './Log';\nimport ThemeSwitch from './ThemeSwitch';\nimport './App.css';\nconst ActiveCategories = React.createContext('activeCategories');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    let startupTheme = 'dark';\n\n    if ('theme' in localStorage) {\n      startupTheme = localStorage.getItem('theme');\n    }\n\n    this.state = {\n      logs: [],\n      categories: {\n        'assert': true,\n        'error': true,\n        'exception': true,\n        'warning': true,\n        'system': true,\n        'performance': true,\n        'log': true,\n        'graphics': true,\n        'ai': true,\n        'audio': true,\n        'content': true,\n        'logic': true,\n        'gui': true,\n        'input': true,\n        'network': true,\n        'animation': true,\n        'physics': true,\n        'event': true\n      },\n      theme: startupTheme\n    };\n    this.addLogData = this.addLogData.bind(this);\n    this.toggleCategory = this.toggleCategory.bind(this);\n    this.toggleTheme = this.toggleTheme.bind(this);\n    let body = document.getElementsByTagName(\"BODY\")[0];\n\n    if (this.state.theme === 'dark') {\n      body.className = 'dark';\n    } else if (this.state.theme === 'light') {\n      body.className = 'light';\n    }\n\n    console.log(\"startup theme is \" + this.state.theme);\n  }\n\n  toggleTheme() {\n    this.setState(state => ({\n      logs: this.state.logs,\n      categories: this.state.categories,\n      theme: state.theme === 'dark' //themes.dark\n      ? 'light' //themes.light\n      : 'dark' //themes.dark,\n\n    }), () => {\n      console.log(\"theme changed to \" + this.state.theme);\n      localStorage.setItem('theme', this.state.theme);\n      let body = document.getElementsByTagName(\"BODY\")[0];\n\n      if (this.state.theme === 'dark') {\n        body.className = 'dark';\n      } else if (this.state.theme === 'light') {\n        body.className = 'light';\n      }\n    });\n    localStorage.setItem('theme', this.state.theme); //console.log(\"theme changed to \" + this.state.theme);\n  }\n\n  updateLocalStorage() {\n    console.log(\"theme changed to \" + this.state.theme);\n    localStorage.setItem('theme', this.state.theme);\n  }\n\n  addLogData(logArray) {\n    this.setState({\n      logs: logArray,\n      categories: this.state.categories,\n      theme: this.state.theme\n    });\n  }\n\n  toggleCategory(key, isActive) {\n    const categoriesCopy = Object.assign({}, this.state.categories);\n    categoriesCopy[key] = isActive;\n    this.setState({\n      logs: this.state.logs,\n      categories: categoriesCopy,\n      theme: this.state.theme\n    });\n  }\n\n  render() {\n    const logs = this.state.logs.map((data, index) => /*#__PURE__*/React.createElement(Log, {\n      key: index,\n      filter: this.state.categories,\n      timeStamp: data.TimeStamp,\n      categories: data.Categories,\n      log: data.Log,\n      trace: data.StackTrace,\n      info: 'data.info',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }));\n    return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n      value: this.state.theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      onLoadedLog: this.addLogData,\n      onCategoryToggle: this.toggleCategory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"logContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, logs), /*#__PURE__*/React.createElement(ThemeSwitch, {\n      swapTheme: this.toggleTheme,\n      isChecked: this.state.theme !== 'dark',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:/Game Development/Loggerhead 2.0/loggerhead/src/App.js"],"names":["React","ThemeContext","Toolbar","Log","ThemeSwitch","ActiveCategories","createContext","App","Component","constructor","props","startupTheme","localStorage","getItem","state","logs","categories","theme","addLogData","bind","toggleCategory","toggleTheme","body","document","getElementsByTagName","className","console","log","setState","setItem","updateLocalStorage","logArray","key","isActive","categoriesCopy","Object","assign","render","map","data","index","TimeStamp","Categories","StackTrace"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ThemeContext from './ThemeContext';\nimport Toolbar from './Toolbar'\nimport Log from './Log'\nimport ThemeSwitch from './ThemeSwitch'\nimport './App.css';\n\nconst ActiveCategories = React.createContext('activeCategories');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let startupTheme = 'dark';\n    if ('theme' in localStorage) {\n      startupTheme = localStorage.getItem('theme');\n    }\n\n    this.state = \n    {\n      logs: [],\n      categories: {\n          'assert': true,        \n          'error': true,\n          'exception': true,\n          'warning': true,\n          'system': true,        \n          'performance': true,\n          'log': true, \n          'graphics': true, \n          'ai': true,\n          'audio': true, \n          'content': true, \n          'logic': true, \n          'gui': true, \n          'input': true,  \n          'network': true, \n          'animation': true, \n          'physics': true, \n          'event': true\n      },\n      theme: startupTheme\n    }\n    this.addLogData = this.addLogData.bind(this);\n    this.toggleCategory = this.toggleCategory.bind(this);\n    this.toggleTheme = this.toggleTheme.bind(this);\n\n    let body = document.getElementsByTagName(\"BODY\")[0];\n      if (this.state.theme === 'dark')\n      {\n        body.className = 'dark';\n      }\n      else if (this.state.theme === 'light')\n      {\n        body.className = 'light';\n      }\n\n    console.log(\"startup theme is \" + this.state.theme);\n  }\n\n  toggleTheme() {\n    this.setState(state => ({\n      logs: this.state.logs,\n      categories: this.state.categories,\n      theme:\n        state.theme === 'dark'//themes.dark\n          ? 'light'//themes.light\n          : 'dark'//themes.dark,\n    }\n    ), \n    () => {\n      console.log(\"theme changed to \" + this.state.theme);\n      localStorage.setItem('theme', this.state.theme);\n\n      let body = document.getElementsByTagName(\"BODY\")[0];\n      if (this.state.theme === 'dark')\n      {\n        body.className = 'dark';\n      }\n      else if (this.state.theme === 'light')\n      {\n        body.className = 'light';\n      }\n    });\n    \n    localStorage.setItem('theme', this.state.theme);\n\n    \n\n    //console.log(\"theme changed to \" + this.state.theme);\n  };\n\n  updateLocalStorage()\n  {\n    console.log(\"theme changed to \" + this.state.theme);\n    localStorage.setItem('theme', this.state.theme);\n  }\n\n  addLogData(logArray)\n  {\n    this.setState({logs: logArray, categories: this.state.categories, theme: this.state.theme});\n  }\n\n  toggleCategory(key, isActive)\n  {\n    const categoriesCopy = Object.assign({}, this.state.categories);\n    categoriesCopy[key] = isActive;\n    this.setState({logs: this.state.logs, categories: categoriesCopy, theme: this.state.theme});\n  }\n\n  render() {\n    const logs = this.state.logs.map((data, index) =>\n      <Log key={index} filter={this.state.categories} timeStamp={data.TimeStamp} categories={data.Categories} log={data.Log} trace={data.StackTrace} info={'data.info'} />\n    );\n\n    return (\n      <ThemeContext.Provider value={this.state.theme}>\n        <div className=\"App\">\n          <Toolbar onLoadedLog={this.addLogData} onCategoryToggle={this.toggleCategory}/>\n          <div className='logContainer'>\n            {logs}\n          </div>\n          <ThemeSwitch swapTheme={this.toggleTheme} isChecked={this.state.theme !== 'dark'}/>\n        </div>\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}